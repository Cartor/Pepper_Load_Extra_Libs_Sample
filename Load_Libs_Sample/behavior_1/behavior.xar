<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="Load libs" id="10" localization="8" tooltip="Enter tooltip here" x="148" y="30">
                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[# This is a helper box that loads all python modules in the "lib" subfolder.

import sys
import os


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.modules = {}
        behaviorPath = os.path.normpath(ALFrameManager.getBehaviorPath(self.behaviorId))
        self.importPath = os.path.join(behaviorPath, self.getParameter("Library Path"))
        if self.importPath not in sys.path:
            sys.path.insert(0, self.importPath)
        for filename in os.listdir(self.importPath):
            if filename.endswith(".py"):
                moduleName = filename[:-3]
                module = __import__(moduleName, globals=globals())
                reload(module) # if the module was already present in the global namespace, reload it.
                globals()[moduleName] = module
                self.modules[moduleName] = module

    def onUnload(self):
        # Try to pretend the module was never loaded... provided it's mine!
        while self.importPath in sys.path:
            sys.path.remove(self.importPath)
        for moduleName, module in self.modules.iteritems():
            if sys.modules.get(moduleName, -1) is module:
                del sys.modules[moduleName]
                # Note that we do not delete globals()[moduleName]
                # This way other boxes can still use them for cleanup in OnUnload(),
                # but if someone imports a module of the same name again, it will replace
                # this one (as inclusion in sys.modules is the criteria for reimpoort)

    def onInput_onStart(self):
        # This is necessary for the modules to be loaded.
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                            <Parameter name="Library Path" inherits_from_parent="0" content_type="3" value="../lib" default_value="lib" custom_choice="0" tooltip="" id="3" />
                        </Box>
                        <Box name="test" id="1" localization="8" tooltip="" x="177" y="196">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        from PIL import Image
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
